#!/usr/bin/python3
"""Module containing Rectangle  class
"""


class Rectangle:
    number_of_instances = 0
    print_symbol = '#'

    def __init__(self, width=0, height=0):
        """
        Width and height
        :param width: width
        :param height: height
        """
        self.width = width
        self.height = height
        Rectangle.number_of_instances += 1

    @property
    def width(self):
        """
        Width
        :return: width
        """
        return self.__width

    @width.setter
    def width(self, value):
        """
        Width to value
        :param value: value
        :return: width to value
        :raises: TypeError if width not integer
                 ValueError if width less than or equal to zero
        """
        if not isinstance(value, int):
            raise TypeError("width must be an integer")
        if value < 0:
            raise ValueError("width must be >= 0")
        self.__width = value

    @property
    def height(self):
        """
        Height
        :return: height
        """
        return self.__height

    @height.setter
    def height(self, value):
        """
        Height to value
        :param value: value
        :return: height to value
        :raises: TypeError if height not integer
                 ValueError if height less than or equal to zero
        """
        if not isinstance(value, int):
            raise TypeError("height must be an integer")
        if value < 0:
            raise ValueError("height must be >= 0")
        self.__height = value

    def area(self):
        """
        Area
        :return: area
        """
        return self.width * self.height

    def perimeter(self):
        """
        Perimeter
        :return: perimeter
        """
        if self.width == 0 or self.height == 0:
            return 0
        return 2 * (self.width + self.height)

    def __str__(self):
        """
        Self
        :return: self
        """
        if self.width == 0 or self.height == 0:
            return ""

        return "\n".join([str(self.print_symbol) * self.width for _ in range(self.height)])

    def __repr__(self):
        """
        Self
        :return: self
        """
        return f"Rectangle({self.width}, {self.height})"

    def __del__(self):
        """
        Self
        :return: self
        """
        print("Bye rectangle...")
        Rectangle.number_of_instances -= 1

    @staticmethod
    def bigger_or_equal(rect_1, rect_2):
        """
        Rect1 and Rect2
        :param rect_1: Rect1
        :param rect_2: Rect2
        :return: Rect1 or Rect2
        :raises: TypeError if Rect1 or Rect2 is not a rectangle instance
        """
        if not isinstance(rect_1, Rectangle):
            raise TypeError("rect_1 must be an instance of Rectangle")
        if not isinstance(rect_2, Rectangle):
            raise TypeError("rect_2 must be an instance of Rectangle")

        if rect_1.area() >= rect_2.area():
            return rect_1
        else:
            return rect_2
